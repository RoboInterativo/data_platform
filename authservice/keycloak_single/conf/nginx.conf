http {
    lua_package_path '/path/to/your/lua/scripts/?.lua;;';

    # Кэш для токенов
    lua_shared_dict keycloak_cache 10m;

    server {
        listen 80;
        server_name your.domain.com;

        # Точка входа для аутентификации
        location /auth {
            internal;
            proxy_pass http://127.0.0.1:8080/realms/your-realm/protocol/openid-connect/userinfo;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }

        location / {
            access_by_lua_block {
                local opts = {
                    discovery = "http://127.0.0.1:8080/realms/your-realm/.well-known/openid-configuration",
                    client_id = "your-client-id",
                    # client_secret = "your-client-secret",
                    redirect_uri = "http://your.domain.com/redirect_uri",
                    scope = "openid email profile groups",
                    access_token_expires_leeway = 30,
                    session_contents = {id_token=true, access_token=true}
                }

                -- Проверка аутентификации
                local res, err = require("resty.openidc").authenticate(opts)
                if err then
                    ngx.status = 403
                    ngx.say(err)
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                -- Проверка групп и метода запроса
                local access_token = res.access_token
                local jwt = require("resty.jwt")
                local jwt_obj = jwt:load_jwt(access_token)
                local groups = jwt_obj.payload.groups or {}

                local is_superadmin = false
                local is_operator = false

                for _, group in ipairs(groups) do
                    if group == "superadmin" then
                        is_superadmin = true
                        break
                    elseif group == "operator" then
                        is_operator = true
                    end
                end

                -- Если пользователь не входит ни в одну из групп
                if not is_superadmin and not is_operator then
                    ngx.status = 403
                    ngx.say("Access denied: no required group membership")
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                -- Если operator пытается использовать не-GET метод
                if is_operator and not is_superadmin and ngx.req.get_method() ~= "GET" then
                    ngx.status = 403
                    ngx.say("Operators can only perform GET requests")
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                -- Устанавливаем заголовки с информацией о пользователе
                ngx.req.set_header("X-User-ID", jwt_obj.payload.sub)
                ngx.req.set_header("X-User-Groups", table.concat(groups, ","))
            }

            proxy_pass http://127.0.0.1:5555;
        }
    }
}
