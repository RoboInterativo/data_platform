server {
        listen 80;
        server_name localhost;
        root /var/www;

        # Security headers
        more_set_headers "Server: Unknown";
        more_set_headers "X-Content-Type-Options: nosniff";
        more_set_headers "X-Frame-Options: DENY";
        more_set_headers "X-XSS-Protection: 1; mode=block";

        # Keycloak endpoints
        location ~ ^/auth/realms/([^/]+)/protocol/openid-connect {
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ========== Token Validation ==========
        location = /_validate_token {
            internal;
            access_by_lua_block {
                local auth_header = ngx.var.http_Authorization
                if not auth_header then
                    ngx.log(ngx.WARN, "Missing Authorization header")
                    return ngx.exit(401)
                end

                local token = string.match(auth_header, "^Bearer%s+(.+)$")
                if not token then
                    ngx.log(ngx.WARN, "Malformed Authorization header")
                    return ngx.exit(401)
                end

                -- Check cache first
                local cache = ngx.shared.token_cache
                local cached = cache:get(token)
                if cached == "valid" then return end
                if cached == "invalid" then return ngx.exit(401) end

                -- Introspect token with Keycloak
                local httpc = http.new()
                httpc:set_timeout(KEYCLOAK_CONFIG.timeout)

                local res, err = httpc:request_uri(
                    KEYCLOAK_CONFIG.url .. "/realms/" .. KEYCLOAK_CONFIG.realm .. "/protocol/openid-connect/token/introspect",
                    {
                        method = "POST",
                        body = "token="..token.."&client_id="..KEYCLOAK_CONFIG.client_id,
                        headers = {
                            ["Content-Type"] = "application/x-www-form-urlencoded",
                            ["Authorization"] = "Basic " .. ngx.encode_base64(KEYCLOAK_CONFIG.client_id..":"..KEYCLOAK_CONFIG.client_secret)
                        }
                    }
                )

                if not res then
                    ngx.log(ngx.ERR, "Keycloak request failed: ", err)
                    return ngx.exit(500)
                end

                if res.status ~= 200 then
                    ngx.log(ngx.WARN, "Keycloak returned: ", res.status)
                    return ngx.exit(401)
                end

                local data = cjson.decode(res.body)
                if not data.active then
                    cache:set(token, "invalid", 60) -- Cache invalid tokens for 60s
                    return ngx.exit(401)
                end

                -- Cache valid tokens for their remaining lifetime (max 1 hour)
                local ttl = math.min(data.exp and (data.exp - os.time()) or 3600, 3600)
                if ttl > 0 then
                    cache:set(token, "valid", ttl)
                end

                -- Set user headers for backend
                ngx.header["X-Auth-User-ID"] = data.sub or ""
                ngx.header["X-Auth-Username"] = data.preferred_username or ""
                ngx.header["X-Auth-Client-ID"] = data.client_id or ""
                ngx.header["X-Auth-Roles"] = data.realm_access and data.realm_access.roles and table.concat(data.realm_access.roles, ",") or ""
            }
        }

        # ========== API Endpoints ==========
        location /api/ {
            # CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Token validation
            access_by_lua_block {
                local res = ngx.location.capture("/_validate_token")
                if res.status ~= 200 then
                    ngx.header.content_type = "application/json"
                    ngx.status = res.status
                    ngx.say(res.status == 401 and
                        '{"error":"unauthorized","message":"Invalid or expired token"}' or
                        '{"error":"server_error","message":"Authentication service unavailable"}')
                    return ngx.exit(res.status)
                end
            }

            # Security headers
            add_header X-Frame-Options DENY always;
            add_header X-Content-Type-Options nosniff always;
            add_header Content-Security-Policy "default-src 'self'" always;

            # Proxy settings
            proxy_pass http://127.0.0.1:8082;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Auth-User-ID $http_x_auth_user_id;
            proxy_set_header X-Auth-Username $http_x_auth_username;
            proxy_set_header X-Auth-Roles $http_x_auth_roles;

            # Timeouts
            proxy_connect_timeout 3s;
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;

            # Logging
            access_log /var/log/nginx/api_access.log json;
            error_log /var/log/nginx/api_error.log warn;
        }

        # ========== Frontend ==========
        location / {
            try_files $uri $uri/ /index.html;

            # Cache static assets
            location ~* \.(?:js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                access_log off;
            }
        }

        # ========== Error Handling ==========
        error_page 401 @error401;
        error_page 403 @error403;
        error_page 500 502 503 504 @error50x;

        location @error401 {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header Content-Type application/json always;
            return 401 '{"error":"unauthorized","message":"Authentication required"}';
        }

        location @error403 {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header Content-Type application/json always;
            return 403 '{"error":"forbidden","message":"Insufficient permissions"}';
        }

        location @error50x {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header Content-Type application/json always;
            return 503 '{"error":"service_unavailable","message":"Backend service unavailable"}';
        }

        # ========== Security ==========
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ^/(?:README|CHANGELOG|LICENSE) {
            deny all;
        }
    }
}
