server {
    listen 80;
    server_name localhost;
    root /var/www;

    # Common proxy settings
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Keycloak endpoints
    # location ~ ^/api/realms/([^/]+)/protocol/openid-connect/token$ {
    #     proxy_pass http://127.0.0.1:8080/realms/$1/protocol/openid-connect/token;
    #     proxy_pass_request_body on;
    #     proxy_set_header Content-Type "application/x-www-form-urlencoded";
    #
    #     # CORS
    #     add_header 'Access-Control-Allow-Origin' '*' always;
    #     # add_header 'Access-Control-Allow-Methods' 'GET, POST,PUT, OPTIONS, PATCH, DELETE' always;
    #     # add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    # }
    location ~ ^/api/realms/([^/]+)/protocol/openid-connect/token$ {
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint Keycloak (–±–µ–∑ /api –≤ –Ω–∞—á–∞–ª–µ)
        proxy_pass http://127.0.0.1:8080/realms/$1/protocol/openid-connect/token;

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤
        proxy_pass_request_body on;
        proxy_set_header Content-Type "application/x-www-form-urlencoded";

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # –î–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        proxy_set_header Authorization "Basic bXljbGllbnQ6OW52N1BVQk55cjNUQjlGcHdqTzFnUGJNMnJEQTBFTEY=";

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        access_log /var/log/nginx/keycloak_token.log main;
        error_log /var/log/nginx/keycloak_token_error.log warn;
    }

    location ~ ^/api/realms/([^/]+)/protocol/openid-connect/userinfo$ {
        proxy_pass http://127.0.0.1:8080/realms/$1/protocol/openid-connect/userinfo;
        proxy_set_header Authorization $http_authorization;

        # CORS
        add_header 'Access-Control-Allow-Origin' '*' always;
        # add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT,OPTIONS, PATCH, DELETE' always;
        # add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    }



#==================
location @token_invalid {
    add_header Content-Type application/json;
    return 401 '{"error": "invalid_token", "message": "Token validation failed"}';
}
location = /_validate_token {
    internal;

    # –£–∫–∞–∑—ã–≤–∞–µ–º userinfo endpoint
    proxy_pass http://127.0.0.1/api/realms/master/protocol/openid-connect/userinfo;

    # –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è GET –Ω–µ –Ω—É–∂–Ω–æ)
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    set $clean_token "";
    if ($http_authorization ~* "^Bearer\s+(.+)$") {
        set $clean_token $1;
    }

    # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
    proxy_set_header Authorization "Bearer $clean_token";

    # –î—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
    proxy_http_version 1.1;
    proxy_method GET;
    proxy_redirect off;

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    proxy_intercept_errors on;
    error_page 401 = @token_invalid;
    error_page 403 = @token_invalid;

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    access_log /var/log/nginx/validate_token_access.log main;
    error_log /var/log/nginx/validate_token_error.log debug;
}

#===========
location /api/fc/ {
    proxy_pass http://127.0.0.1:8082/api/v1/fc/;
    include /etc/nginx/cors.conf; # Extract CORS to a separate file for reuse
}

location /api/hardware/ {
    proxy_pass http://127.0.0.1:8082/api/v1/hardware/;
    include /etc/nginx/cors.conf;
}

location /api/ctrl/ {
    include /etc/nginx/pre.conf;

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    auth_request /_validate_token;
    auth_request_set $auth_status $upstream_status;

    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    error_page 401 = @error401;

    include /etc/nginx/api_security.conf;

    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
    proxy_pass http://127.0.0.1:8082/api/v1/ctrl/;

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–µ–∫–µ–Ω–¥–∞
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header X-Forwarded-Path $uri;

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    access_log /var/log/nginx/api_ctrl_access.log main;
    error_log /var/log/nginx/api_ctrl_error.log debug;

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∫–µ–Ω–¥–∞
    proxy_intercept_errors on;
    error_page 404 = @backend404;
}

location @backend404 {
    add_header Content-Type application/json;
    return 404 '{"error": "not_found", "message": "The requested resource was not found", "path": "$uri"}';
}


location @error401 {
    return 401 '{"error": "Unauthorized", "message": "Invalid or expired token"}';
    add_header Content-Type application/json;
}

location @error403 {
    return 403 '{"error": "Forbidden", "message": "Insufficient permissions"}';
    add_header Content-Type application/json;
}
location /api/network/ {
    proxy_pass http://127.0.0.1:8082/api/v1/network/;
    include /etc/nginx/cors.conf;
}

location /api/iscsi/ {
    proxy_pass http://127.0.0.1:8082/iscsi/;
    include /etc/nginx/cors.conf;
}


#================

    # –õ–æ–≥–∏–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞ (–æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)
    # location /api/auth/login {
    #     proxy_pass http://127.0.0.1:8082;
    #     include /etc/nginx/cors.conf;
    # }
    #
    # # –í—Å–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ API, –∫—Ä–æ–º–µ login
    # location ~ ^/api/(?!auth/login).*$ {
    #     auth_request /_validate_token;
    #     auth_request_set $auth_status $upstream_status;
    #     error_page 401 = @error401;
    #     proxy_pass http://127.0.0.1:8082;
    #     include /etc/nginx/cors.conf;
    # }



    # üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 401 (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    # location @error401 {
    #     return 401 '{"error": "Unauthorized", "message": "Invalid or expired token"}';
    #     add_header Content-Type application/json;
    # }
#================

    # Generic API catch-all
    location /api/ {
        proxy_pass http://127.0.0.1:8088;
        include /etc/nginx/cors.conf;
    }

    # Socket.io
    location /socket.io/ {
        proxy_pass http://127.0.0.1:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        include /etc/nginx/cors.conf; # Add CORS support for WebSocket
    }

    # Frontend
    location / {
        try_files $uri $uri/ /index.html;

        location ~* \.(?:ico|css|js|gif|jpe?g|png|svg)$ {
            expires 30d;
            add_header Cache-Control "public";
        }
    }

    # Block PHP outside allowed zones
    location ~ ^/(?!wiki).*\.php$ {
        return 404;
    }

    location ~ /\. {
        deny all;
    }
}
