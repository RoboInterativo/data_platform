server {
    listen 80;
    server_name localhost;
    root /var/www;

    # Common proxy settings
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Keycloak endpoints
    location ~ ^/api/realms/([^/]+)/protocol/openid-connect/token$ {
        proxy_pass http://127.0.0.1:8080/realms/$1/protocol/openid-connect/token;
        proxy_pass_request_body on;
        proxy_set_header Content-Type "application/x-www-form-urlencoded";

        # CORS
        add_header 'Access-Control-Allow-Origin' '*' always;
        # add_header 'Access-Control-Allow-Methods' 'GET, POST,PUT, OPTIONS, PATCH, DELETE' always;
        # add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    }

    location ~ ^/api/realms/([^/]+)/protocol/openid-connect/userinfo$ {
        proxy_pass http://127.0.0.1:8080/realms/$1/protocol/openid-connect/userinfo;
        proxy_set_header Authorization $http_authorization;

        # CORS
        add_header 'Access-Control-Allow-Origin' '*' always;
        # add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT,OPTIONS, PATCH, DELETE' always;
        # add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    }
#========
location = /_validate_token {
    internal;
    proxy_pass http://127.0.0.1:8080/realms/master/protocol/openid-connect/token/introspect;
    proxy_pass_request_body on;
    proxy_set_header Content-Type "application/x-www-form-urlencoded";
    proxy_set_header Authorization "Basic bXljbGllbnQ6OW52N1BVQk55cjNUQjlGcHdqTzFnUGJNMnJEQTBFTEY=";

    # Проверка на пустой токен
    if ($http_authorization = "") {
        return 401;
    }

    # Извлечение токена
    set $clean_token "";
    if ($http_authorization ~* "^Bearer\s+(.+)$") {
        set $clean_token $1;
    }
    proxy_set_body "token=$clean_token";

    proxy_method POST;
    proxy_http_version 1.1;
    proxy_connect_timeout 2s;
    proxy_read_timeout 5s;
    proxy_next_upstream error timeout invalid_header;

    # Обработка ошибок
    proxy_intercept_errors on;
    error_page 401 403 = @token_invalid;

    access_log /var/log/nginx/keycloak_introspect.log main buffer=32k flush=1m;
    error_log /var/log/nginx/keycloak_introspect_error.log warn;
}

location @token_valid {
    return 204; # Успешная валидация токена
}

location @token_invalid {
    return 401 '{"error": "invalid_token"}';
}
#========

location @token_check {
    # Парсим JSON-ответ (пример через map)
    set $token_valid "401";

    if ($upstream_http_content_type ~* "application/json") {
        set $token_valid "200";  # Временное значение
    }

    # Проверяем статус ответа от Keycloak
    if ($upstream_status != 200) {
        return 401;
    }

    # Финализируем проверку
    if ($token_valid = "200") {
        return 204;  # Используем 204 No Content вместо 200
    }
    return 401;
}

location @error401 {
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
    add_header Content-Type application/json;
    return 401 '{"error": "Unauthorized", "message": "Invalid or expired token", "path": "$request_uri"}';
}

location @error403 {
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
    add_header Content-Type application/json;
    return 403 '{"error": "Forbidden", "message": "Insufficient permissions", "required_roles": ["admin"]}';
}


#=======
#API endpoints with CORS
    location /api/fc/ {
        include /etc/nginx/pre.conf;
        auth_request /_validate_token;
        include /etc/nginx/api_security.conf;
        proxy_pass http://127.0.0.1:8082/api/v1/fc/;
        access_log /var/log/nginx/api_fc_access.log main;

    }

    location /api/hardware/ {
        include /etc/nginx/pre.conf;
        auth_request /_validate_token;
        include /etc/nginx/api_security.conf;
        proxy_pass http://127.0.0.1:8082/api/v1/hardware/;
        access_log /var/log/nginx/api_hardware_access.log main;

    }

    location /api/ctrl/ {
        include /etc/nginx/pre.conf;
        auth_request /_validate_token;
        include /etc/nginx/api_security.conf;

        proxy_pass http://127.0.0.1:8082/api/v1/ctrl/;

        add_header X-Backend-Path "/api/v1/ctrl/$uri" always;
        access_log /var/log/nginx/api_ctrl_access.log main;
        error_log /var/log/nginx/api_ctrl_error.log debug;
    }

    location /api/network/ {
      include /etc/nginx/pre.conf;
      auth_request /_validate_token;
      include /etc/nginx/api_security.conf;
      proxy_pass http://127.0.0.1:8082/api/v1/network/;
      access_log /var/log/nginx/api_network_access.log main;
    }

    location /api/iscsi/ {
        include /etc/nginx/pre.conf;
        auth_request /_validate_token;
        include /etc/nginx/api_security.conf;
        proxy_pass http://127.0.0.1:8082/iscsi/;
        access_log /var/log/nginx/api_iscsi_access.log main;

    }

    # Generic API catch-all
    location /api/ {
        include /etc/nginx/pre.conf;
        auth_request /_validate_token;
        include /etc/nginx/api_security.conf;
        proxy_pass http://127.0.0.1:8088;

        # Специфичные настройки
        access_log /var/log/nginx/api_general_access.log main;
        error_log /var/log/nginx/api_general_error.log warn;

        # # Важно: отключаем auth_request для OPTIONS (CORS preflight)
        # if ($request_method = 'OPTIONS') {
        #     satisfy any;
        #     allow all;
        # }
    }

    # Socket.io
    location /socket.io/ {
        proxy_pass http://127.0.0.1:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        include /etc/nginx/cors.conf; # Add CORS support for WebSocket
    }

    # Frontend
    location / {
        try_files $uri $uri/ /index.html;

        location ~* \.(?:ico|css|js|gif|jpe?g|png|svg)$ {
            expires 30d;
            add_header Cache-Control "public";
        }
    }

    # Block PHP outside allowed zones
    location ~ ^/(?!wiki).*\.php$ {
        return 404;
    }

    location ~ /\. {
        deny all;
    }
}
