server {
    listen 8888;
    server_name localhost;
    root /var/www;



    # Проверка аутентификации через oauth2-proxy
    location = /oauth2/auth {
        proxy_pass http://127.0.0.1:4180/oauth2/auth;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }

    # Callback для oauth2-proxy
    location = /oauth2/callback {
        proxy_pass http://127.0.0.1:4180/oauth2/callback;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Проксирование к Keycloak для токенов и userinfo
    location ~ ^/api/realms/([^/]+)/protocol/openid-connect/(token|userinfo|introspect) {
        proxy_pass http://127.0.0.1:8080/realms/$1/protocol/openid-connect/$2;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass_request_body on;
        proxy_set_header Content-Type $http_content_type;
        proxy_set_header Content-Length $http_content_length;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Accept "application/json";

        add_header @cors_headers $cors_headers always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;

        access_log /var/log/nginx/keycloak_access.log;
        error_log /var/log/nginx/keycloak_error.log;
    }

    # Проксирование к Keycloak для админских API (только для администраторов)
    location ~ ^/api/admin/realms/([^/]+)/(users|userinfo) {
        auth_request /oauth2/auth;
        auth_request_set $auth_groups $upstream_http_x_auth_request_groups;
        # Временное логирование для отладки
        # access_log /var/log/nginx/custom.log custom;
        # Логирование для отладки
        access_log /var/log/nginx/debug_groups.log debug_groups;
        # Только администраторы имеют доступ
        # if ($auth_groups !~ superadmin) {
        #     return 403 '{"error": "Forbidden", "message": "Admin access required"}';
        # }
        if ($auth_groups !~ \[.*superadmin.*\]) {
          return 403 '{"error": "Forbidden", "message": "Admin access required"}';
        }

        # if ($auth_groups !~ (^superadmin$|^superadmin,|,superadmin$|,superadmin,)) {
        #   return 403 '{"error": "Forbidden", "message": "Admin access required"}';
        # }
        proxy_pass http://127.0.0.1:8080/admin/realms/$1/$2;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass_request_body on;
        proxy_set_header Content-Type $http_content_type;
        proxy_set_header Content-Length $http_content_length;
        proxy_set_header Accept "application/json";
        proxy_set_header X-Auth-Request-Groups $auth_groups;

        add_header @cors_headers $cors_headers always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        proxy_hide_header 'Access-Control-Allow-Origin';
        proxy_hide_header 'Access-Control-Allow-Methods';
        proxy_hide_header 'Access-Control-Allow-Headers';
        proxy_hide_header 'Access-Control-Allow-Credentials';

        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;

        access_log /var/log/nginx/keycloak_access.log;
        error_log /var/log/nginx/keycloak_error.log;
    }

    # Защищённые API
    location ~ ^/api/(ctrl|hardware|fc|iscsi|network|net)/ {
        auth_request /oauth2/auth;
        auth_request_set $auth_groups $upstream_http_x_auth_request_groups;

        # Запрещаем не-GET методы для не-администраторов
        if ($restrict_access = 1) {
            return 403 '{"error": "Forbidden", "message": "Only GET allowed for non-admins"}';
        }

        proxy_pass http://127.0.0.1:8082/api/v1/$1/;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Auth-Request-Groups $auth_groups;

        add_header @cors_headers $cors_headers always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;

        error_page 401 = @error401;

        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log;
    }

    # Общий API
    location /api/ {
        auth_request /oauth2/auth;
        auth_request_set $auth_groups $upstream_http_x_auth_request_groups;

        # Запрещаем не-GET методы для не-администраторов
        if ($restrict_access = 1) {
            return 403 '{"error": "Forbidden", "message": "Only GET allowed for non-admins"}';
        }

        proxy_pass http://127.0.0.1:8088/api/;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Auth-Request-Groups $auth_groups;

        add_header @cors_headers $cors_headers always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;

        error_page 401 = @error401;

        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log;
    }

    # Запрещённые URL
    location ~ ^/api/restricted/ {
        auth_request /oauth2/auth;
        auth_request_set $auth_groups $upstream_http_x_auth_request_groups;

        # Только администраторы имеют доступ
        if ($auth_groups !~ superadmin) {
            return 403 '{"error": "Forbidden", "message": "Admin access required"}';
        }

        proxy_pass http://127.0.0.1:8082$request_uri;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Auth-Request-Groups $auth_groups;

        add_header @cors_headers $cors_headers always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;

        access_log /var/log/nginx/restricted_access.log;
        error_log /var/log/nginx/restricted_error.log;
    }

    # Обработка ошибок 401
    location @error401 {
        add_header Content-Type application/json;
        add_header @cors_headers $cors_headers always;
        return 401 '{"error": "Unauthorized", "message": "Invalid or missing token"}';
    }

    # WebSocket
    location /socket.io/ {
        proxy_pass http://127.0.0.1:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        add_header @cors_headers $cors_headers always;
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        proxy_read_timeout 3600s;
        proxy_connect_timeout 3600s;
    }

    # Frontend
    location / {
        try_files $uri $uri/ /index.html;

        location ~* \.(?:ico|css|js|gif|jpe?g|png|svg)$ {
            expires 30d;
            add_header Cache-Control "public";
        }
    }

    # Block PHP outside allowed zones
    location ~ ^/(?!wiki).*\.php$ {
        return 404;
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
    }
}
